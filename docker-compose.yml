version: '3.7'
x-generic: &generic
    networks:
      - micado_net
    logging:
      options:
        max-size: '12m'
        max-file: '5'
      driver: json-file

services:
# FRONTEND
  fail2ban:
    image: crazymax/fail2ban:latest
    network_mode: "host"
    environment:
      TZ: Europe/Rome
      F2B_IPTABLES_CHAIN: DOCKER-USER
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban_logs:/var/log:ro
      - fail2ban_data:/data

  balancer:
    image: traefik:v2.1.4
    environment:
      TZ: Europe/Rome
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "gioppo.recreate=1"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - "443:443" # The HTTPS port
    volumes:
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml
#      - ./traefik/dynamic.toml:/etc/traefik/dynamic.toml
#      - ./traefik/certs:/etc/certs # SSL Development certificates
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - $PWD/fail2ban_logs:/var/log
      - ./traefik/traefik-acme/acme.json:/acme.json
    <<: *generic


  nginx:
    image: nginx:1.17.9
    volumes:
      - $PWD/nginx/nginx.conf:/etc/nginx/nginx.conf
      - type: volume
        source: data_site_migrant
        target: /usr/share/nginx/html/migrants
        read_only: true
        volume:
          nocopy: true
      - type: volume
        source: data_site_pa
        target: /usr/share/nginx/html/pa
        read_only: true
        volume:
          nocopy: true
      - type: volume
        source: data_site_ngo
        target: /usr/share/nginx/html/ngo
        read_only: true
        volume:
          nocopy: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`${MIGRANTS_HOSTNAME}`)"
      - "traefik.http.routers.nginx.entrypoints=web"
      - "traefik.http.routers.nginx.service=nginx"
      - "traefik.http.routers.nginx.middlewares=redirect"
      - "traefik.http.middlewares.redirect.redirectscheme.scheme=https"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx2.rule=Host(`${MIGRANTS_HOSTNAME}`)"
      - "traefik.http.routers.nginx2.entrypoints=web-secure"
      - "traefik.http.routers.nginx2.tls=true"
      - "traefik.http.routers.nginx2.tls.certresolver=myresolver"
      - "traefik.http.routers.nginx2.service=nginx2"
      - "traefik.http.services.nginx2.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx3.rule=Host(`${PA_HOSTNAME}`)"
      - "traefik.http.routers.nginx3.entrypoints=web"
      - "traefik.http.routers.nginx3.service=nginx3"
      - "traefik.http.services.nginx3.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx4.rule=Host(`${PA_HOSTNAME}`)"
      - "traefik.http.routers.nginx4.entrypoints=web-secure"
      - "traefik.http.routers.nginx4.tls=true"
      - "traefik.http.routers.nginx4.tls.certresolver=myresolver"
      - "traefik.http.routers.nginx4.service=nginx4"
      - "traefik.http.services.nginx4.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx5.rule=Host(`${NGO_HOSTNAME}`)"
      - "traefik.http.routers.nginx5.entrypoints=web"
      - "traefik.http.routers.nginx5.service=nginx5"
      - "traefik.http.services.nginx5.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx6.rule=Host(`${NGO_HOSTNAME}`)"
      - "traefik.http.routers.nginx6.entrypoints=web-secure"
      - "traefik.http.routers.nginx6.tls=true"
      - "traefik.http.routers.nginx6.tls.certresolver=myresolver"
      - "traefik.http.routers.nginx6.service=nginx6"
      - "traefik.http.services.nginx6.loadbalancer.server.port=80"
      - "traefik.http.routers.countly.rule=Host(`${ANALYTIC_HOSTNAME}`)"
      - "traefik.http.routers.countly.entrypoints=web-secure"
      - "traefik.http.routers.countly.service=countly_service"
      - "traefik.http.routers.countly.tls=true"
      - "traefik.http.routers.countly.tls.certresolver=myresolver"
      - "traefik.http.services.countly_service.loadbalancer.server.port=80"
#      - "traefik.http.routers.countly_api.rule=Host(`${ANALYTIC_HOSTNAME}`) && PathPrefix(`/i`)"
#      - "traefik.http.routers.countly_api.entrypoints=web"
#      - "traefik.http.routers.countly_api.service=countly_api_service"
#      - "traefik.http.services.countly_api_service.loadbalancer.server.port=3001"
#      - "traefik.http.routers.countly_api2.rule=Host(`${ANALYTIC_HOSTNAME}`) && PathPrefix(`/o`)"
#      - "traefik.http.routers.countly_api2.entrypoints=web"
#      - "traefik.http.routers.countly_api2.service=countly_api_service2"
#      - "traefik.http.services.countly_api_service2.loadbalancer.server.port=3001"
#      - "traefik.http.routers.countly_frontend.rule=Host(`${ANALYTIC_HOSTNAME}`)"
#      - "traefik.http.routers.countly_frontend.entrypoints=web"
#      - "traefik.http.routers.countly_frontend.service=countly_frontend_service"
#      - "traefik.http.services.countly_frontend_service.loadbalancer.server.port=6001"
    <<: *generic
    depends_on:
      - countly_api

  data_migrants:
    command: "sh -c 'rm -rf /var/www/html/* && ls -lat /var/www/html/ && cp -ra /var/www/html2/* /var/www/html/ && ls -lat /var/www/html/ && trap : TERM INT; (while true; do sleep 1000; done) & wait'"
    #TODO more elegant copy like copy with mv
    image: micadoproject/migrant_app_site # change tag and redeploy stack
    volumes:
      - data_site_migrant:/var/www/html
    <<: *generic


  data_pa:
    command: "sh -c 'rm -rf /var/www/html/* && ls -lat /var/www/html/ && cp -ra /var/www/html2/* /var/www/html/ && ls -lat /var/www/html/ && trap : TERM INT; (while true; do sleep 1000; done) & wait'"
    #TODO more elegant copy like copy with mv
    image: micadoproject/pa_app_site # change tag and redeploy stack
    volumes:
      - data_site_pa:/var/www/html
    <<: *generic


  data_ngo:
    command: "sh -c 'rm -rf /var/www/html/* && ls -lat /var/www/html/ && cp -ra /var/www/html2/* /var/www/html/ && ls -lat /var/www/html/ && trap : TERM INT; (while true; do sleep 1000; done) & wait'"
    #TODO more elegant copy like copy with mv
    image: micadoproject/ngo_app_site # change tag and redeploy stack
    volumes:
      - data_site_ngo:/var/www/html
    <<: *generic


# DATABASE STUFF

  micado_db:
    image: mdillon/postgis:11-alpine
    env_file:
#      - .env
      - prod.env
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
      - type: volume
        source: postgres_init
        target: /docker-entrypoint-initdb.d
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    <<: *generic


  data_api:
    image: postgrest/postgrest:v6.0.2
    env_file:
      - prod.env
    environment:
      PGRST_DB_URI: postgres://${MICADO_DB_PWD}:${MICADO_DB_USER}@micado_db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMA: ${MICADO_DB_SCHEMA}
      PGRST_DB_ANON_ROLE: ${MICADO_DB_USER} #In production this role should not be the same as the one used for the connection
    depends_on:
      - micado_db
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    <<: *generic


  db_admin:
    image: dpage/pgadmin4:4.18
    env_file:
      - prod.env
    environment:
      PGADMIN_DEFAULT_EMAIL: micado@csi.it
#      PGADMIN_DEFAULT_PASSWORD: micadoadmin
    labels:
      - traefik.enable=true
      - "traefik.http.routers.db_admin.rule=Host(`${DB_ADMIN_HOSTNAME}`)"
      - "traefik.http.routers.db_admin.entrypoints=web"
    depends_on:
      - micado_db
    <<: *generic


# API GATEWAY
  api_gateway:
    image: wso2/wso2am:3.0.0
    env_file:
      - prod.env
    environment:
      JAVA_OPTS: "-Dserver.hostname=\"0.0.0.0\" -Djava.rmi.server.hostname=\"192.168.4.26\" -Dorg.wso2.ignoreHostnameVerification=true -Dhttpclient.hostnameVerifier=AllowAll"
      WSO2_API_ADMIN_USER: ${WSO2_API_ADMIN_USER}
#      WSO2_API_ADMIN_PWD: ${WSO2_API_ADMIN_PWD}
      GATEWAY_HOSTNAME: ${GATEWAY_HOSTNAME}
      API_HOSTNAME: ${API_HOSTNAME}
      IDENTITY_HOSTNAME: ${IDENTITY_HOSTNAME}
      WSO2_API_USER: ${WSO2_API_USER}
#      WSO2_API_PWD: ${WSO2_API_PWD}
      POSTGRES_DB: ${POSTGRES_DB}
      WSO2_SHARED_USER: ${WSO2_SHARED_USER}
#      WSO2_SHARED_PWD: ${WSO2_SHARED_PWD}
      WSO2_IDENTITY_ADMIN_USER: ${WSO2_IDENTITY_ADMIN_USER}
#      WSO2_IDENTITY_ADMIN_PWD: ${WSO2_IDENTITY_ADMIN_PWD}
    volumes:
#      - ./api_manager/deployment.toml:/home/wso2carbon/wso2am-3.0.0/repository/conf/deployment.toml
      - ./api_manager:/home/wso2carbon/wso2-config-volume
      - ./pg_lib/postgresql-42.2.9.jar:/home/wso2carbon/wso2am-3.0.0/repository/components/lib/postgresql-42.2.9.jar
      - api_sinapse:/home/wso2carbon/wso2am-3.0.0/repository/deployment/server/synapse-configs
      - api_executionplans:/home/wso2carbon/wso2am-3.0.0/repository/deployment/server/executionplans
      - api_tenants:/home/wso2carbon/wso2am-3.0.0/repository/tenants
      - api_database:/home/wso2carbon/wso2am-3.0.0/repository/database
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "traefik.enable=true"
#      - "traefik.one.http.routers.api_gateway.rule=Host(`api.micado_dev.eu`)"
#      - "traefik.one.http.services.api_gateway.loadbalancer.server.port=8280"
#      - "traefik.tcp.routers.api_gateway.rule=HostSNI(`${GATEWAY_HOSTNAME}`)"
#      - "traefik.tcp.routers.api_gateway.tls.passthrough=true"
#      - "traefik.tcp.routers.api_gateway.service=api_gateway_service"
#      - "traefik.tcp.routers.api_gateway.tls.certresolver=myresolver"
#      - "traefik.tcp.services.api_gateway_service.loadbalancer.server.port=9443"
      - "traefik.http.routers.api_gateway.rule=Host(`${GATEWAY_HOSTNAME}`)"
      - "traefik.http.routers.api_gateway.entrypoints=web"
      - "traefik.http.routers.api_gateway.middlewares=redirect"
      - "traefik.http.routers.api_gateway.service=api_gateway_service"
      - "traefik.http.services.api_gateway_service.loadbalancer.server.port=9443"
      - "traefik.http.middlewares.redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.api_gateway_https.rule=Host(`${GATEWAY_HOSTNAME}`)"
      - "traefik.http.routers.api_gateway_https.entrypoints=web-secure"
      - "traefik.http.routers.api_gateway_https.tls=true"
      - "traefik.http.routers.api_gateway_https.tls.certresolver=myresolver"
      - "traefik.http.routers.api_gateway_https.service=api_gateway_service_https"
      - "traefik.http.services.api_gateway_service_https.loadbalancer.server.port=9443"
      - "traefik.http.services.api_gateway_service_https.loadbalancer.server.scheme=https"
#      - traefik.http.services.api_gateway.loadbalancer.server.port=9443
      - "traefik.http.routers.api_gateway_api.rule=Host(`${API_HOSTNAME}`)"
      - "traefik.http.routers.api_gateway_api.entrypoints=web"
      - "traefik.http.routers.api_gateway_api.middlewares=redirect"
      - "traefik.http.routers.api_gateway_api.service=api_gateway_api_service"
      - "traefik.http.services.api_gateway_api_service.loadbalancer.server.port=8243"
#      - "traefik.http.middlewares.redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.api_gateway_api_https.rule=Host(`${API_HOSTNAME}`)"
      - "traefik.http.routers.api_gateway_api_https.entrypoints=web-secure"
      - "traefik.http.routers.api_gateway_api_https.tls=true"
      - "traefik.http.routers.api_gateway_api_https.tls.certresolver=myresolver"
      - "traefik.http.routers.api_gateway_api_https.service=api_gateway_api_service_https"
      - "traefik.http.services.api_gateway_api_service_https.loadbalancer.server.port=8243"
      - "traefik.http.services.api_gateway_api_service_https.loadbalancer.server.scheme=https"
#      - "traefik.two.frontend.rule=Host:apis.micado_dev.eu:"
#      - "traefik.two.port=8243"
#      - "traefik.two.docker.network=micado_net"
#      - "traefik.three.frontend.rule=Host:gateway.micado_dev.eu:"
#      - "traefik.three.port=9443"
#      - "traefik.three.docker.network=micado_net"
#    depends_on:
#      - upload_service
#      - chatbot
#      - data_virtualization
#      - data_api
    <<: *generic
    networks:
      micado_net:
        aliases:
         - api.micadoproject.eu
         - gateway.micadoproject.eu
# IDENTITY
  identity_server:
    image: wso2/wso2is-km:5.9.0
#    healthcheck:
#      test: ["CMD", "curl", "-k", "-f", "https://localhost:9443/carbon/admin/login.jsp"]
#      interval: 5s
#      timeout: 120s
#      start_period: 100s
    env_file:
      - prod.env
    environment:
      JAVA_OPTSlog definitionHOSTNAME: ${IDENTITY_HOSTNAME}
      WSO2_API_USER: ${WSO2_API_USER}
#      WSO2_API_PWD: ${WSO2_API_PWD}
      POSTGRES_DB: ${POSTGRES_DB}
      WSO2_SHARED_USER: ${WSO2_SHARED_USER}
#      WSO2_SHARED_PWD: ${WSO2_SHARED_PWD}
      WSO2_IDENTITY_ADMIN_USER: ${WSO2_IDENTITY_ADMIN_USER}
      API_HOSTNAME: ${API_HOSTNAME}
      IDENTITY_HOSTNAME: ${IDENTITY_HOSTNAME}
#      WSO2_IDENTITY_ADMIN_PWD: ${WSO2_IDENTITY_ADMIN_PWD}
      WSO2_API_SERVICE: ${WSO2_API_SERVICE}
      WEBLATE_ADMIN_EMAIL: ${WEBLATE_ADMIN_EMAIL}
      WEBLATE_EMAIL_HOST: ${WEBLATE_EMAIL_HOST}
#    secrets:
#      - WSO2_SHARED_PWD
#      - WSO2_API_ADMIN_PWD
#      - WSO2_IDENTITY_ADMIN_PWD
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "traefik.enable=true"
#      - "traefik.tcp.routers.identity_server.rule=HostSNI(`${IDENTITY_HOSTNAME}`)"
#      - "traefik.tcp.routers.identity_server.tls.passthrough=true"
#      - "traefik.tcp.routers.identity_server.service=identity_server_service"
#      - "traefik.tcp.services.identity_server_service.loadbalancer.server.port=9443"
#      - "traefik.tcp.routers.identity_server.entrypoints=web-secure"
      - "traefik.http.routers.identity_server.rule=Host(`${IDENTITY_HOSTNAME}`)"
      - "traefik.http.routers.identity_server.entrypoints=web"
      - "traefik.http.routers.identity_server.middlewares=redirect"
      - "traefik.http.routers.identity_server.service=identity_server_service"
      - "traefik.http.services.identity_server_service.loadbalancer.server.port=9443"
      - "traefik.http.middlewares.redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.identity_server_https.rule=Host(`${IDENTITY_HOSTNAME}`)"
      - "traefik.http.routers.identity_server_https.entrypoints=web-secure"
      - "traefik.http.routers.identity_server_https.tls=true"
      - "traefik.http.routers.identity_server_https.tls.certresolver=myresolver"
      - "traefik.http.routers.identity_server_https.service=identity_server_service_https"
      - "traefik.http.services.identity_server_service_https.loadbalancer.server.port=9443"
      - "traefik.http.services.identity_server_service_https.loadbalancer.server.scheme=https"
    volumes:
      - ./identity-server:/home/wso2carbon/wso2-config-volume
      - ./pg_lib/postgresql-42.2.9.jar:/home/wso2carbon/wso2is-km-5.9.0/repository/components/lib/postgresql-42.2.9.jar
      - identity_server_vol:/home/wso2carbon/wso2is-km-5.9.0/repository/deployment/server
    depends_on:
      - micado_db
    <<: *generic
    networks:
      micado_net:
        aliases:
         - identity.micadoproject.eu

  backend:
    image: micadoproject/backend
    environment:
      HOST: backend
#    ports:
#      - "3001:3000"
    <<: *generic


# DASHBOARD
  dashboard:
    image: metabase/metabase:v0.34.2
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${DASHBOARD_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.dashboard.service=dashboard"
      - "traefik.http.routers.dashboard.middlewares=redirect"
      - "traefik.http.middlewares.redirect.redirectscheme.scheme=https"
      - "traefik.http.services.dashboard.loadbalancer.server.port=3000"
      - "traefik.http.routers.dashboard2.rule=Host(`${DASHBOARD_HOSTNAME}`)"
      - "traefik.http.routers.dashboard2.entrypoints=web-secure"
      - "traefik.http.routers.dashboard2.tls=true"
      - "traefik.http.routers.dashboard2.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard2.service=dashboard2"
      - "traefik.http.services.dashboard2.loadbalancer.server.port=3000"
    depends_on:
      - micado_db
    environment:
#      MAPBOX_API_KEY: ${MAPBOX_API_KEY}
      MAPBOX_API_KEY: pk.eyJ1IjoiZ2lvcHBvbHVjYSIsImEiOiJjajhvd2d0bHIwODNsMnBwY3cwcjk2ZmU1In0.z4104Ptx7zgjW4yOjh7Wlg
      MB_DB_FILE: /metabase-data/metabase.db
    volumes:
      - type: volume
        source: metabase_data
        # target is the path in the container
        target: /metabase-data
    <<: *generic


  upload_service:
    image: tusproject/tusd:v1.0.2
    ports:
      - "1080:1080"
    command:
      - -behind-proxy
      - -port=1080
#      - -hooks-dir=/hooks/
      - -expose-metrics=true
      - -metrics-path=/metrics
      - -hooks-enabled-events=post-create,post-finish,pre-create
      - -upload-dir=/data
      - -hooks-http=http://node:8081
    volumes:
      - type: volume
        source: tusd_hooks
        # target is the path in the container
        target: /hooks
      - type: volume
        source: tusd_data
        # target is the path in the container
        target: /data
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.upload_service.rule=Host(`upload.micado.csi.it`)"
#      - "traefik.http.services.upload_service.loadbalancer.server.port=1080"
#      - "traefik.http.routers.upload_service.entrypoints=web"
    networks:
      - micado_net

  chatbot:
    image: rasa/rasa:1.10.10-full
 #   volumes:
 #     - /home/gioppo/Development/dockerfiles/micado_new/rasa:/app
    command:
#      - train
      - run
      - --cors
      - "*"
      - -p
      - "5005"
      - --enable-api
      - --auth-token
      - "thisismysecret"
    volumes:
      - type: volume
        source: chatbot_data
        # target is the path in the container
        target: /app
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    <<: *generic


  action_server:
    image: rasa/rasa-sdk:1.10.2
    volumes:
      - type: volume
        source: chatbot_actions
        # target is the path in the container
        target: /app/actions
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    <<: *generic


  duckling_server:
    image: rasa/duckling:0.1.6.3
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    <<: *generic



  mongodb:
    image: mongo:4.1
    hostname: mongodb
#    environment:
#      - MONGODB_USERNAME=countly
#      - MONGODB_PASSWORD
#      - MONGODB_DATABASE
#      MONGO_INITDB_ROOT_USERNAME: countly
#      MONGO_INITDB_ROOT_PASSWORD: countly
#      MONGO_INITDB_DATABASE: countly
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    volumes:
      - mongo_data:/data/db
#    healthcheck:
#      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet) -eq 1
#      interval: 10s
#      start_period: 30s
#    command: ["-f", "/etc/mongod.conf", "--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all"]
    command: mongod --oplogSize 128 --replSet rs0
    <<: *generic

  mongo-init-replica:
    image: mongo:4.1
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongodb/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    depends_on:
      - mongodb
    <<: *generic
    
  mongo-express:
    image: mongo-express
#    restart: always
    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: countly
#      ME_CONFIG_MONGODB_ADMINPASSWORD: countly
      ME_CONFIG_MONGODB_SERVER: mongodb
    networks:
      - micado_net
    depends_on:
      - mongodb

  countly_api:
    image: 'countly/api:19.08.1'
    # Enterprise Edition: image: 'gcr.io/countly-01/api:19.08.1'
    environment:
      - COUNTLY_PLUGINS=mobile,web,desktop,plugins,density,locale,browser,sources,views,enterpriseinfo,logger,systemlogs,errorlogs,populator,reports,crashes,push,star-rating,slipping-away-users,compare,server-stats,dbviewer,assistant,plugin-upload,times-of-day,compliance-hub,video-intelligence-monetization,alerts,onboarding
      - COUNTLY_CONFIG_API_MONGODB_HOST=mongodb
#      - COUNTLY_CONFIG_API_MONGODB_USERNAME=countly
#      - COUNTLY_CONFIG_API_MONGODB_PASSWORD=countly
      - COUNTLY_CONFIG_API_MONGODB_DB=countly
      - COUNTLY_CONFIG_FRONTEND_MONGODB_HOST=mongodb
#      - COUNTLY_CONFIG_FRONTEND_MONGODB_USERNAME=countly
#      - COUNTLY_CONFIG_FRONTEND_MONGODB_PASSWORD=countly
      - COUNTLY_CONFIG_FRONTEND_MONGODB_DB=countly
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    <<: *generic
    depends_on:
      - mongodb

  countly_frontend:
    image: 'countly/frontend:19.08.1'
    # Enterprise Edition: image: 'gcr.io/countly-01/api:19.08.1'
    environment:
      - COUNTLY_PLUGINS=mobile,web,desktop,plugins,density,locale,browser,sources,views,enterpriseinfo,logger,systemlogs,errorlogs,populator,reports,crashes,push,star-rating,slipping-away-users,compare,server-stats,dbviewer,assistant,plugin-upload,times-of-day,compliance-hub,video-intelligence-monetization,alerts,onboarding
      # Enterprise Edition: - COUNTLY_PLUGINS=mobile,web,desktop,plugins,density,locale,browser,sources,views,drill,funnels,concurrent_users,retention_segments,revenue,logger,systemlogs,errorlogs,populator,reports,crashes,push,block,restrict,users,geo,star-rating,slipping-away-users,compare,server-stats,dashboards,assistant,flows,dbviewer,cohorts,crash_symbolication,crashes-jira,groups,white-labeling,plugin-upload,alerts,times-of-day,compliance-hub,onboarding,remote-config,formulas,ab-testing
      - COUNTLY_CONFIG_API_MONGODB_HOST=mongodb
#      - COUNTLY_CONFIG_API_MONGODB_USERNAME=${MONGODB_USERNAME}
#      - COUNTLY_CONFIG_API_MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - COUNTLY_CONFIG_FRONTEND_MONGODB_HOST=mongodb
#      - COUNTLY_CONFIG_FRONTEND_MONGODB_USERNAME=${MONGODB_USERNAME}
#      - COUNTLY_CONFIG_FRONTEND_MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - COUNTLY_CONFIG_FRONTEND_MONGODB_DB=countly
    <<: *generic
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    depends_on:
      - mongodb
#    deploy:
      # There is usually no need in multiple frontends, so throttling down resources for it
#      mode: global
#      resources:
#        limits:
#          cpus: '0.5'
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#        window: 120s



  weblate:
    image: weblate/weblate:4.1.1-2
    volumes:
      - weblate_data:/app/data
      - ./weblate/0007_use_trigram.py:/usr/local/lib/python3.7/dist-packages/weblate/memory/migrations/0007_use_trigram.py
      - ./weblate/0008_adjust_similarity.py:/usr/local/lib/python3.7/dist-packages/weblate/memory/migrations/0008_adjust_similarity.py
    env_file:
      - prod.env
    environment:
      WEBLATE_EMAIL_HOST: ${WEBLATE_EMAIL_HOST}
      WEBLATE_EMAIL_HOST_USER: ${WEBLATE_EMAIL_HOST_USER}
#      WEBLATE_EMAIL_HOST_PASSWORD: ${WEBLATE_EMAIL_HOST_PASSWORD}
      WEBLATE_SERVER_EMAIL: ${WEBLATE_SERVER_EMAIL}
      WEBLATE_DEFAULT_FROM_EMAIL: ${WEBLATE_DEFAULT_FROM_EMAIL}
      WEBLATE_ALLOWED_HOSTS: ${WEBLATE_ALLOWED_HOSTS}
#      WEBLATE_ADMIN_PASSWORD: ${WEBLATE_ADMIN_PASSWORD}
      WEBLATE_ADMIN_NAME: ${WEBLATE_ADMIN_NAME}
      WEBLATE_ADMIN_EMAIL: ${WEBLATE_ADMIN_EMAIL}
      WEBLATE_SITE_TITLE: ${WEBLATE_SITE_TITLE}
      WEBLATE_REGISTRATION_OPEN: ${WEBLATE_REGISTRATION_OPEN}
      POSTGRES_PASSWORD: ${WEBLATE_POSTGRES_PASSWORD}
      POSTGRES_USER: ${WEBLATE_POSTGRES_USER}
      POSTGRES_DATABASE: ${POSTGRES_DB}
      POSTGRES_HOST: ${WEBLATE_POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    labels:
      - "traefik.enable=true"
      - "com.centurylinklabs.watchtower.enable=false"
      - "traefik.http.routers.weblate.rule=Host(`${TRANSLATION_HOSTNAME}`)"
      - "traefik.http.routers.weblate.entrypoints=web"
#      - "traefik.http.routers.weblate.service=weblate"
      - "traefik.http.routers.weblate.middlewares=redirect"
      - "traefik.http.middlewares.redirect.redirectscheme.scheme=https"
#      - "traefik.http.services.weblate.loadbalancer.server.port=8080"
      - "traefik.http.routers.weblate2.rule=Host(`${TRANSLATION_HOSTNAME}`)"
      - "traefik.http.routers.weblate2.entrypoints=web-secure"
      - "traefik.http.routers.weblate2.tls=true"
      - "traefik.http.routers.weblate2.tls.certresolver=myresolver"
      - "traefik.http.routers.weblate2.service=weblate2"
      - "traefik.http.services.weblate2.loadbalancer.server.port=8080"
    <<: *generic


  cache:
    image: redis:4-alpine
#    restart: always
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    <<: *generic


  git:
    image: gitea/gitea:1.12.2
    <<: *generic
    env_file:
      - prod.env
    environment:
#      DB_TYPE: postgres
#      DB_HOST: micado_db:5432
#      DB_NAME: ${POSTGRES_DB}
#      DB_USER: ${GITEA_DB_USER}
#      DB_PASSWD: ${GITEA_DB_PWD}
      DISABLE_REGISTRATION: "true"
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "traefik.http.routers.git1.rule=Host(`${GIT_HOSTNAME}`)"
      - "traefik.http.routers.git1.entrypoints=web"
      - "traefik.http.routers.git1.service=git1"
      - "traefik.http.services.git1.loadbalancer.server.port=80"
      - "traefik.http.routers.git2.rule=Host(`${GIT_HOSTNAME}`)"
      - "traefik.http.routers.git2.entrypoints=web-secure"
      - "traefik.http.routers.git2.tls=true"
      - "traefik.http.routers.git2.tls.certresolver=myresolver"
      - "traefik.http.routers.git2.service=git2"
      - "traefik.http.services.git2.loadbalancer.server.port=3000"
    volumes:
      - git_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

# Environment Management

  watchtower:
    image: containrrr/watchtower
#    environment:
#      - http_proxy=http://10.138.149.7:3128
#      - https_proxy=http://10.138.149.7:3128
#      - HTTP_PROXY=http://10.138.149.7:3128
#      - HTTPS_PROXY=http://10.138.149.7:3128
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
#      - /root/.docker/config.json:/config.json
    command: --interval 300 --debug
    <<: *generic


volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/db_data
      o: bind
  postgres_init:
    driver: local
    driver_opts:
      type: none
      # device is the path in the host that has to be absolute
      device: $PWD/db_init
      o: bind
  chatbot_actions:
    driver: local
    driver_opts:
      type: none
      device: $PWD/rasa/actions
      o: bind
  chatbot_data:
    driver: local
    driver_opts:
      type: none
      device: $PWD/rasa
      o: bind
  metabase_data:
    driver: local
    driver_opts:
      type: none
      device: $PWD/metabase
      o: bind
  tusd_data:
    driver: local
    driver_opts:
      type: none
      device: $PWD/tusd_data
      o: bind
  tusd_hooks:
    driver: local
    driver_opts:
      type: none
      device: $PWD/tusd_config/hooks
      o: bind
  fail2ban_data:
    driver: local
    driver_opts:
      type: none
      device: $PWD/fail2ban
      o: bind
  data_site_migrant:
    driver: local
  data_site_pa:
    driver: local
  data_site_ngo:
    driver: local
  mongo_data:
    driver: local
    driver_opts:
      type: none
      device: $PWD/mongo_data
      o: bind
  weblate_data:
    driver: local
    driver_opts:
      type: none
      device: $PWD/weblate_data
      o: bind
    driver: local
  redis_data:
    driver_opts:
      type: none
      device: $PWD/redis_data
      o: bind
  git_data:
    driver_opts:
      type: none
      device: $PWD/git_data
      o: bind

  api_sinapse:
    driver: local
  api_executionplans:
    driver: local
  api_tenants:
    driver: local
  api_database:
    driver: local
  identity_server_vol:
    driver: local

#secrets:
#  WSO2_API_ADMIN_PWD:
#    file: ./secrets/wso2_api_admin_pwd.txt
#  WSO2_IDENTITY_ADMIN_PWD:
#    file: ./secrets/wso2_identity_admin_pwd.txt
#  WSO2_SHARED_PWD:
#    file: ./secrets/wso2_shared_pwd.txt


networks:
  micado_net:
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet:  172.24.0.0/16
